ðŸš€ The Ultimate Arch Linux Installation Guide (LVM + LUKS)

ðŸ›  Step 1: Boot from Arch Linux Live USB

    Create a Bootable USB:
    Use Rufus on Windows or dd on Linux to create a bootable Arch Linux installer.

    # WARNING: Replace /dev/sdX with your actual USB device!
    dd if=archlinux.iso of=/dev/sdX bs=4M status=progress && sync

    Boot from USB:
    Press F12 (or your device's boot menu key) at startup and select the USB drive. Choose "Arch Linux install medium".

    Verify Internet Connection:

    ping -c 3 archlinux.org

    Connect to Wi-Fi (if needed):

    iwctl
    # Inside iwctl prompt:
    station wlan0 connect "YourWiFiName"
    exit

ðŸ›  Step 2: Prepare Disk (Partitioning)

    Identify Disk:

    lsblk

    (Assume your SSD is /dev/sda for this guide)

    Wipe Disk (Optional but Recommended):
    WARNING: This erases everything!

    wipefs -a /dev/sda

    Create Partitions with gdisk:

    gdisk /dev/sda

        n â†’ Partition 1 â†’ Size 512M â†’ Type EF00 (EFI System)

        n â†’ Partition 2 â†’ Size (rest of disk) â†’ Type 8309 (Linux LUKS)

        w â†’ Write changes and exit.

    Format EFI Partition:

    mkfs.fat -F32 /dev/sda1

ðŸ›  Step 3: Set Up LUKS Encryption

    Encrypt the Main Partition:

    cryptsetup luksFormat /dev/sda2

    (Type YES in uppercase and set a strong passphrase)

    Open the Encrypted Partition:
    This unlocks the LUKS container and makes it available at /dev/mapper/cryptroot.

    cryptsetup open /dev/sda2 cryptroot

ðŸ›  Step 4: Set Up LVM Inside LUKS

    Create LVM Physical Volume and Volume Group:

    pvcreate /dev/mapper/cryptroot
    vgcreate cryptroot /dev/mapper/cryptroot

    Create Logical Volumes (Root, Swap, Home):

    lvcreate -L 100G cryptroot -n root
    lvcreate -L 16G cryptroot -n swap
    lvcreate -l 100%FREE cryptroot -n home

    Format Filesystems and Enable Swap:

    mkfs.ext4 /dev/mapper/cryptroot-root
    mkfs.ext4 /dev/mapper/cryptroot-home
    mkswap /dev/mapper/cryptroot-swap
    swapon /dev/mapper/cryptroot-swap

ðŸ›  Step 5: Mount Partitions

mount /dev/mapper/cryptroot-root /mnt
mkdir /mnt/home /mnt/boot
mount /dev/mapper/cryptroot-home /mnt/home
mount /dev/sda1 /mnt/boot

ðŸ›  Step 6: Install Arch Linux Base System

    Install Essential Packages:

    pacstrap /mnt base linux linux-firmware lvm2 vim nano

    Generate fstab:
    This file tells the system how to mount your partitions on boot.

    genfstab -U /mnt >> /mnt/etc/fstab

ðŸ›  Step 7: System Configuration

    Change Root into New System:

    arch-chroot /mnt

    Set Timezone:

    ln -sf /usr/share/zoneinfo/America/Los_Angeles /etc/localtime
    hwclock --systohc

    Set Locale:
    Uncomment en_US.UTF-8 UTF-8 in /etc/locale.gen, then run:

    locale-gen
    echo "LANG=en_US.UTF-8" > /etc/locale.conf

    Set Hostname:

    echo "arch-t480" > /etc/hostname

    Enable Networking:

    pacman -S networkmanager
    systemctl enable NetworkManager

ðŸ›  Step 8: Configure Initramfs

The initramfs is the initial RAM-based filesystem that loads before your real root filesystem. It needs to know how to unlock your encrypted drive.

    Edit /etc/mkinitcpio.conf:
    Find the HOOKS line and ensure it looks like this:
    HOOKS=(base udev autodetect modconf block encrypt lvm2 filesystems keyboard fsck)

    Regenerate Initramfs:

    mkinitcpio -P

ðŸ›  Step 9: Install & Configure GRUB Bootloader

    Install GRUB:

    pacman -S grub efibootmgr
    grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB

    Edit /etc/default/grub:
    Find the GRUB_CMDLINE_LINUX_DEFAULT line and modify it to tell GRUB where the encrypted device is.
    GRUB_CMDLINE_LINUX_DEFAULT="cryptdevice=UUID=<your-UUID>:cryptroot root=/dev/mapper/cryptroot-root rw loglevel=3 quiet"
    (Find your UUID with blkid /dev/sda2)

    Generate GRUB Config:

    grub-mkconfig -o /boot/grub/grub.cfg

ðŸ›  Step 10: Configure Automatic Decryption (Optional)

This step will allow your system to boot without asking for the LUKS passphrase. It does this by storing a keyfile inside the secure initramfs.

    Create a Keyfile:

    dd bs=512 count=4 if=/dev/random of=/crypto_key.bin
    chmod 600 /crypto_key.bin

    Add Keyfile to LUKS:
    This adds the new keyfile as a valid way to unlock the drive.

    cryptsetup luksAddKey /dev/sda2 /crypto_key.bin

    (Enter your original passphrase when prompted)

    Add Keyfile to Initramfs:
    Edit /etc/mkinitcpio.conf and add the keyfile to the FILES array:
    FILES=(/crypto_key.bin)

    Re-generate Initramfs:

    mkinitcpio -P

    Configure /etc/crypttab:
    This file tells the system how to automatically unlock devices. Create it and add the following line:
    cryptroot UUID=<your-UUID> /crypto_key.bin luks
    (Use the same UUID from Step 9)

ðŸ›  Step 11: Set Root Password & Create Admin User

    Set Root Password:

    passwd

    Create an Admin User:

    pacman -S sudo
    useradd -m -G wheel -s /bin/bash admin
    passwd admin

    Enable Sudo:
    Uncomment the %wheel ALL=(ALL:ALL) ALL line in the /etc/sudoers file by running visudo.

ðŸš€ Step 12: First Boot & Desktop Environment Setup

    Exit and Reboot:

    exit
    umount -R /mnt
    reboot

    Login:
    Login as your new admin user.

    Install a Desktop Environment:
    Choose one of the following options.

    Option A: Install GNOME (Stable & Polished)

    sudo pacman -S gnome gdm
    sudo systemctl enable gdm.service
    reboot

    (After rebooting, you will be greeted by the GDM login manager. Log in and select "GNOME".)

    Option B: Install Cosmic DE (New & Modern)

    sudo pacman -S cosmic-desktop cosmic-greeter
    sudo systemctl enable cosmic-greeter.service
    reboot

    (After rebooting, you will be greeted by the Cosmic Greeter. Log in to your new Cosmic session.)

ðŸŽ‰ Congratulations! Your laptop is now running a fully encrypted, auto-decrypting Arch Linux installation! ðŸš€
